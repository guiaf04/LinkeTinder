plugins {
    id 'groovy'
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation 'org.apache.groovy:groovy'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.github.dozermapper:dozer-core:7.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.spockframework:spock-core:2.4-M5-groovy-4.0'
    implementation 'org.flywaydb:flyway-core:11.3.1'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql:11.3.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Configuração do Checkstyle
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

checkstyleMain {
    source = 'src/main/java'
    configFile = file("config/checkstyle/checkstyle.xml")
}

checkstyleTest {
    source = 'src/test/java'
    configFile = file("config/checkstyle/checkstyle.xml")
    // Aplicar regras mais flexíveis para testes
    ignoreFailures = true
}

// Task para executar checkstyle em todos os arquivos Java
task checkstyleAll(type: Checkstyle) {
    description = 'Run checkstyle on all Java source files'
    group = 'verification'
    classpath = files()
    source = fileTree('src/main/java') + fileTree('src/test/java')
    include '**/*.java'
    configFile = file("config/checkstyle/checkstyle.xml")
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("${buildDir}/reports/checkstyle/checkstyleAll.xml")
        html.outputLocation = file("${buildDir}/reports/checkstyle/checkstyleAll.html")
    }
}

// Task para gerar relatório de estilo de código
task codeStyleReport {
    dependsOn checkstyleMain, checkstyleTest
    description = 'Generate comprehensive code style report'
    group = 'verification'

    doLast {
        println "Code style reports generated:"
        println "- Main: build/reports/checkstyle/main.html"
        println "- Test: build/reports/checkstyle/test.html"
    }
}

// Integrar checkstyle ao processo de build
check.dependsOn checkstyleMain, checkstyleTest

// Task para aplicar correções automáticas básicas (placeholder)
task fixCodeStyle {
    description = 'Apply basic automatic code style fixes'
    group = 'formatting'

    doLast {
        println "Para correções automáticas, use sua IDE ou ferramentas como:"
        println "- IntelliJ IDEA: Code -> Reformat Code"
        println "- VS Code: Format Document"
    }
}
